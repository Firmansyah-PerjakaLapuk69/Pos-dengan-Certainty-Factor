<!DOCTYPE html>
<html lang="en">
<head>
<%- include('partials/head') %>
</head>
<body class="bg-light">

<%- include('partials/sidebar') %>

<div class="content">
  
  <div class="d-flex justify-content-between align-items-center mb-3">
        <div>
            <button class="btn btn-outline-primary me-2" onclick="toggleSidebar()">
            <i class="fa fa-bars"></i>
            </button>
            <button class="btn btn-outline-secondary" onclick="toggleDarkMode()">
            <i class="fa fa-moon"></i>
            </button>
        </div>
    </div>

  <h1 class="mb-4">Dashboard</h1>

  <!-- Ringkasan -->
  <div class="row text-center mb-4" id="summary"></div>

  <!-- Grafik Penjualan Bulan Ini -->
  <div class="card mb-4">
    <div class="card-header">Grafik Penjualan Bulan Ini</div>
    <div class="card-body">
      <canvas id="salesMonthChart" height="100"></canvas>
    </div>
  </div>

  <!-- Grafik Penjualan Tahun Ini -->
  <div class="card mb-4">
    <div class="card-header">Grafik Penjualan Tahun Ini</div>
    <div class="card-body">
      <canvas id="salesYearChart" height="100"></canvas>
    </div>
  </div>

  <!-- Produk Stok Rendah -->
  <div class="card mb-4">
    <div class="card-header">Produk Stok Rendah (&lt; 50)</div>
    <ul class="list-group list-group-flush" id="lowStockList"></ul>
  </div>

  <!-- Produk Hampir Kedaluwarsa -->
  <div class="card mb-4">
    <div class="card-header">Produk Kedaluwarsa dalam 6 Bulan</div>
    <ul class="list-group list-group-flush" id="expiringList"></ul>
  </div>

  <!-- Transaksi Terbaru -->
  <div class="card mb-4">
    <div class="card-header">Transaksi Terbaru</div>
    <div class="table-responsive">
      <table class="table table-striped mb-0" id="recentTable">
        <thead>
          <tr>
            <th>ID</th>
            <th>Kasir</th>
            <th>Total</th>
            <th>Status</th>
            <th>Waktu</th>
          </tr>
        </thead>
        <tbody></tbody>
      </table>
    </div>
  </div>

  <!-- Produk Terlaris -->
  <div class="card mb-4">
    <div class="card-header">Top 5 Produk Terlaris</div>
    <div class="card-body">
      <canvas id="topProductsChart" height="100"></canvas>
    </div>
  </div>

  
  <!-- Rekomendasi Pakar (Expert System) -->
  <div class="card mb-4 shadow">
    <div class="card-header fw-bold">üîç Rekomendasi Pakar</div>
    <div class="table-responsive">
      <table class="table table-striped table-hover mb-0" id="expertRecommendationTable">
        <thead class="table-dark">
          <tr>
            <th>Produk</th>
            <th>Total Terjual</th>
            <th>Total Stok</th>
            <th>Rekomendasi</th>
            <th>Aturan</th>
            <th>Certainty Factor</th>
          </tr>
        </thead>
        <tbody></tbody>
      </table>
    </div>
  </div>

  <!-- Rekomendasi Diskon Aman -->
  <div class="card mb-4 shadow">
    <div class="card-header fw-bold">üí° Rekomendasi Diskon Aman</div>
      <div class="table-responsive">
        <table class="table table-striped table-hover mb-0" id="safeDiscountTable">
          <thead class="table-dark">
            <tr>
              <th>Produk</th>
              <th>Stok</th>
              <th>Harga Jual</th>
              <th>Harga Beli</th>
              <th>Harga Jual Diskon</th>
              <th>Margin/Unit</th>
              <th>Omzet Diskon</th>
              <th>Rekomendasi</th>
              <th>Unit Didiskon</th>
              <th>Estimasi Profit</th>
              <th>Status</th>
            </tr>
          </thead>
          <tbody></tbody>
        </table>
      </div>
  </div>

</div>

<script>
  function formatRupiah(number) {
    return new Intl.NumberFormat('id-ID', { style: 'currency', currency: 'IDR' }).format(number);
  }

  async function fetchAndDisplay() {
    try {
      // 1. Summary
      const summaryData = await fetch('/dashboard/summary').then(res => res.json());
      const now = new Date();
      const bulan = now.toLocaleString('id-ID', { month: 'long' });
      const tahun = now.getFullYear();

      const monthly = summaryData.find(item => item.periode === 'bulan');
      const yearly = summaryData.find(item => item.periode === 'tahun');

      document.getElementById('summary').innerHTML = `
        <!-- RINGKASAN BULAN -->
        <div class="col-12 mb-3">
          <h4>Ringkasan Bulan ${bulan} ${tahun}</h4>
        </div>
        ${renderSummaryCards(monthly)}

        <!-- RINGKASAN TAHUN -->
        <div class="col-12 mt-5 mb-3">
          <h4>Ringkasan Tahun ${tahun}</h4>
        </div>
        ${renderSummaryCards(yearly)}
      `;

      function renderSummaryCards(data) {
        return `
          <div class="col-md-3">
            <div class="card text-bg-primary">
              <div class="card-body">
                <h5>Total Transaksi</h5>
                <p>${data.total_transactions}</p>
              </div>
            </div>
          </div>
          <div class="col-md-3">
            <div class="card text-bg-success">
              <div class="card-body">
                <h5>Total Pendapatan</h5>
                <p>${formatRupiah(data.total_revenue)}</p>
              </div>
            </div>
          </div>
          <div class="col-md-3">
            <div class="card text-bg-warning">
              <div class="card-body">
                <h5>Item Terjual</h5>
                <p>${data.total_items_sold}</p>
              </div>
            </div>
          </div>
          <div class="col-md-3">
            <div class="card text-bg-info">
              <div class="card-body">
                <h5>Rata-rata Transaksi</h5>
                <p>${formatRupiah(data.avg_transaction_value)}</p>
              </div>
            </div>
          </div>
          <div class="col-md-3 mt-4">
            <div class="card text-bg-secondary">
              <div class="card-body">
                <h5>Total Modal</h5>
                <p>${formatRupiah(data.total_modal)}</p>
              </div>
            </div>
          </div>
          <div class="col-md-3 mt-4">
            <div class="card text-bg-danger">
              <div class="card-body">
                <h5>Total Profit</h5>
                <p>${formatRupiah(data.total_profit)}</p>
              </div>
            </div>
          </div>
        `;
      }

      // Grafik penjualan bulan ini
      const monthlySales = await fetch('/dashboard/sales-month').then(res => res.json());
      const monthlyLabels = monthlySales.map(e => {
        const date = new Date(e.date);
        return `${date.getDate().toString().padStart(2, '0')}`;
      });
      const monthlyData = monthlySales.map(e => e.total_revenue);

      new Chart(document.getElementById('salesMonthChart'), {
        type: 'bar',
        data: {
          labels: monthlyLabels,
          datasets: [{
            label: 'Pendapatan Harian',
            data: monthlyData,
            backgroundColor: 'rgba(153, 102, 255, 0.6)',
            borderColor: 'rgba(153, 102, 255, 1)',
            borderWidth: 1
          }]
        },
        options: {
          responsive: true,
          scales: {
            y: {
              beginAtZero: true,
              ticks: {
                callback: value => formatRupiah(value)
              },
              title: {
                display: true,
                text: 'Pendapatan (Rp)'
              }
            },
            x: {
              title: {
                display: true,
                text: 'Tanggal'
              }
            }
          }
        }
      });

      // Grafik penjualan tahun ini
      const yearlySales = await fetch('/dashboard/sales-year').then(res => res.json());
      const yearlyLabels = yearlySales.map(e => {
        const date = new Date(e.month);
        return date.toLocaleString('id-ID', { month: 'long' });
      });
      const yearlyData = yearlySales.map(e => e.total_revenue);

      new Chart(document.getElementById('salesYearChart'), {
        type: 'line',
        data: {
          labels: yearlyLabels,
          datasets: [{
            label: 'Pendapatan Bulanan',
            data: yearlyData,
            borderColor: 'rgba(255, 159, 64, 1)',
            backgroundColor: 'rgba(255, 159, 64, 0.2)',
            tension: 0.4
          }]
        },
        options: {
          responsive: true,
          scales: {
            y: {
              beginAtZero: true,
              ticks: {
                callback: value => formatRupiah(value)
              },
              title: {
                display: true,
                text: 'Pendapatan (Rp)'
              }
            },
            x: {
              title: {
                display: true,
                text: 'Bulan'
              }
            }
          }
        }
      });

      // 3. Produk stok rendah
      const lowStock = await fetch('/dashboard/low-stock').then(res => res.json());
      document.getElementById('lowStockList').innerHTML = lowStock.length === 0
        ? `<li class="list-group-item">Semua produk memiliki stok mencukupi.</li>`
        : lowStock.map(p => `
          <li class="list-group-item d-flex justify-content-between">
            ${p.name} <span class="badge bg-danger">${p.total_stock}</span>
          </li>`).join('');

      // 4. Produk akan/sudah kedaluwarsa
      const resExp = await fetch('/dashboard/expiring');
      if (!resExp.ok) throw new Error('Gagal fetch /expiring');
      const expiring = await resExp.json();

      document.getElementById('expiringList').innerHTML = expiring.length === 0
        ? `<li class="list-group-item">Tidak ada produk yang akan atau sudah kadaluwarsa.</li>`
        : expiring.map(p => {
          const today = new Date();
          const expiry = new Date(p.expiry_date);
          const diffDays = Math.floor((expiry - today) / (1000 * 60 * 60 * 24));
          const diffMonths = Math.floor(diffDays / 30);
          const remainingDays = diffDays % 30;

          let keterangan = '';
          if (p.status === 'expired') {
            keterangan = `<span class="text-danger fw-bold">‚ùå Sudah kadaluwarsa</span>`;
          } else if (p.status === 'expiring_soon') {
            keterangan = `<span class="text-warning">‚ö†Ô∏è Akan kadaluwarsa dalam ${diffMonths > 0 ? diffMonths + ' bulan ' : ''}${remainingDays} hari</span>`;
          } else {
            keterangan = `<span class="text-success">‚úÖ Aman</span>`;
          }

          return `
            <li class="list-group-item">
              <strong>${p.product_name}</strong><br>
              Batch: ${p.batch_number} | Exp: ${p.expiry_date} | Stock: ${p.stock}<br>
              ${keterangan}
            </li>`;
      }).join('');

      // 5. Transaksi terbaru
      const recent = await fetch('/dashboard/recent').then(res => res.json());
      const tbody = document.querySelector('#recentTable tbody');
      tbody.innerHTML = recent.length === 0
        ? `<tr><td colspan="5" class="text-center">Tidak ada transaksi terbaru.</td></tr>`
        : recent.map(t => `
          <tr>
            <td>${t.id_transactions}</td>
            <td>${t.cashier_name}</td>
            <td>${formatRupiah(t.total_price)}</td>
            <td>${t.status}</td>
            <td>${t.created_at}</td>
          </tr>`).join('');

      // 6. Top Produk
      const topProducts = await fetch('/dashboard/top-products').then(res => res.json());
      if (topProducts.length === 0) {
        document.getElementById('topProductsChart').parentElement.innerHTML = `<p class="text-center">Tidak ada data produk terlaris.</p>`;
      } else {
        new Chart(document.getElementById('topProductsChart'), {
          type: 'bar',
          data: {
            labels: topProducts.map(p => p.product_name),
            datasets: [{
              label: 'Jumlah Terjual',
              data: topProducts.map(p => p.total_sold),
              backgroundColor: 'rgba(54, 162, 235, 0.6)',
              borderColor: 'rgba(54, 162, 235, 1)',
              borderWidth: 1
            }]
          },
          options: {
            responsive: true,
            scales: {
              y: { beginAtZero: true }
            }
          }
        });
      }

      // 7. Rekomendasi Sistem Pakar
      const expertRes = await fetch('/dashboard/expert-recommendation');
      if (!expertRes.ok) throw new Error('Server error saat memuat rekomendasi pakar');
      const expert = await expertRes.json();

      const expertTableBody = document.querySelector('#expertRecommendationTable tbody');
      if (!expert || expert.length === 0) {
        expertTableBody.innerHTML = `
          <tr>
            <td colspan="6" class="text-center text-muted">Tidak ada rekomendasi saat ini.</td>
          </tr>`;
      } else {
        expertTableBody.innerHTML = expert.map(row => {
          const badgeColor = row.recommendation?.toLowerCase().includes('tambah') ? 'success'
                            : row.recommendation?.toLowerCase().includes('kurangi') ? 'danger'
                            : 'primary';

          return `
            <tr>
              <td>${row.product_name || '-'}</td>
              <td>${row.total_sold ?? 0}</td>
              <td>${row.total_stock ?? 0}</td>
              <td><span class="badge bg-${badgeColor}">${row.recommendation || '-'}</span></td>
              <td><code>${row.rule_name || '-'}</code></td>
              <td><span class="badge bg-info text-dark">${(row.certainty_factor * 100).toFixed(1)}%</span></td>
            </tr>`;
        }).join('');
      }
    } catch (err) {
      console.error('Error loading expert recommendations:', err);
      alert('Gagal memuat rekomendasi pakar.');
    }

    // 8. Rekomendasi Diskon Aman
    try {
      const res = await fetch('/dashboard/safe-discount');
      if (!res.ok) throw new Error('Gagal memuat data diskon aman');
      const data = await res.json();

      // Menampilkan data rekomendasi diskon aman
      const tableBody = document.querySelector('#safeDiscountTable tbody');
      if (!data || data.length === 0) {
        tableBody.innerHTML = `<tr><td colspan="11" class="text-center text-muted">Tidak ada rekomendasi diskon aman saat ini.</td></tr>`;
      } else {
        tableBody.innerHTML = data.map(row => {
          const status = row.status === 'Aman' 
            ? `<span class="badge bg-success">‚úÖ ${row.status}</span>` 
            : `<span class="badge bg-danger">‚ùå ${row.status}</span>`;
            
          return `
            <tr>
              <td>${row.product_name}</td>
              <td>${row.total_stock}</td>
              <td>${formatRupiah(row.selling_price)}</td>
              <td>${formatRupiah(row.purchase_price)}</td>
              <td>${formatRupiah(row.discounted_price)}</td>
              <td>${formatRupiah(row.unit_margin)}</td>
              <td>${formatRupiah(row.estimated_revenue)}</td>
              <td><span class="badge bg-warning text-dark">${row.recommendation}</span></td>
              <td>${row.discount_units}</td>
              <td>${formatRupiah(row.estimated_profit)}</td>
              <td>${status}</td>
            </tr>`;
        }).join('');
      }
    } catch (err) {
      console.error('Error loading safe discount recommendations:', err);
      alert('Gagal memuat rekomendasi diskon aman.');
    }
  }

  fetchAndDisplay();
</script>

<script src="js/scriptMain.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</body>
</html>
